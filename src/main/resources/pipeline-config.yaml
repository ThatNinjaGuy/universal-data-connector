pipelines:
  - name: "text-processor"
    source:
      type: file
      properties:
        path: "data/input/text"
        pattern: "*.txt"
    transformations:
      - type: filter
        properties:
          condition: "important"
      - type: map
        properties:
          prefix: "processed-"
          suffix: "-done"
    sink:
      type: file
      properties:
        path: "data/output"
        prefix: "processed"
        extension: ".txt"

  - name: "csv-to-csv"
    source:
      type: file
      properties:
        path: "data/input/csv-to-csv"
        pattern: "*.csv"
    transformations:
      - type: filter
        properties:
          column: "status"
          condition: "important"
      - type: map
        properties:
          format: "csv"
          columnMapping:
            id: "id"
            name: "name"
            status: "status"
    sink:
      type: file
      properties:
        path: "data/output"
        prefix: "processed"
        extension: ".csv"
        includeHeaders: true

  - name: "csv-to-parquet"
    source:
      type: file
      properties:
        path: "data/input/csv-to-parquet"
        pattern: "*.csv"
    transformations:
      - type: filter
        properties:
          column: "status"
          condition: "important"
      - type: map
        properties:
          format: "csv"
          columnMapping:
            id: "id"
            project: "project"
            status: "status"
    sink:
      type: file
      properties:
        path: "data/output"
        format: "parquet"
        schema: |
          {
            "type": "record",
            "name": "CsvRecord",
            "namespace": "com.example",
            "fields": [
              {"name": "id", "type": "string"},
              {"name": "project", "type": "string"},
              {"name": "status", "type": "string"},
              {"name": "assignee", "type": "string"},
              {"name": "deadline", "type": "string"}
            ]
          }

  - name: "csv-to-postgres"
    source:
      type: file
      properties:
        path: "data/input/csv-to-postgres"
        pattern: "*.csv"
    transformations:
      - type: map
        properties:
          format: "csv"
          columnMapping:
            id: "ID"
            name: "NAME"
            email: "EMAIL"
            department: "DEPARTMENT"
            salary: "SALARY"
    sink:
      type: jdbc
      properties:
        jdbcUrl: "jdbc:postgresql://localhost:5432/udc"
        user: "deadshot"
        password: ""
        table: "employee"
        query: "INSERT INTO employee (id, name, email, department, salary) VALUES (?, ?, ?, ?, ?) ON CONFLICT (id) DO UPDATE SET name = EXCLUDED.name, email = EXCLUDED.email, department = EXCLUDED.department, salary = EXCLUDED.salary"
        batchSize: 1000

  - name: "postgres-to-csv"
    source:
      type: jdbc
      properties:
        jdbcUrl: "jdbc:postgresql://localhost:5432/udc"
        user: "deadshot"
        password: ""
        table: "employee"
        query: "SELECT id, name, email, department, salary FROM employee ORDER BY id"
        batchSize: 1000
        oneTimeOperation: true
    transformations:
      - type: map
        properties:
          format: "csv"
          columnMapping:
            id: "id"
            name: "name"
            email: "email"
            department: "department"
            salary: "salary"
    sink:
      type: file
      properties:
        path: "data/output"
        prefix: "employee_export"
        extension: ".csv"
        includeHeaders: true

  - name: "postgres-to-parquet"
    source:
      type: jdbc
      properties:
        jdbcUrl: "jdbc:postgresql://localhost:5432/udc"
        user: "deadshot"
        password: ""
        table: "employee"
        query: "SELECT id, name, email, department, salary FROM employee ORDER BY id"
        batchSize: 1000
        oneTimeOperation: true
    transformations:
      - type: map
        properties:
          format: "csv"
          columnMapping:
            id: "id"
            name: "name"
            email: "email"
            department: "department"
            salary: "salary"
    sink:
      type: file
      properties:
        path: "data/output"
        format: "parquet"
        schema: |
          {
            "type": "record",
            "name": "Employee",
            "namespace": "com.example",
            "fields": [
              {"name": "id", "type": "int"},
              {"name": "name", "type": "string"},
              {"name": "email", "type": "string"},
              {"name": "department", "type": "string"},
              {"name": "salary", "type": "double"}
            ]
          }
        jdbcMode: true
